const Coupon = require('../models/Coupon');

class CouponController {
  // L·∫•y danh s√°ch coupons c√¥ng khai (kh√¥ng c·∫ßn x√°c th·ª±c)
  static async getPublicCoupons(req, res) {
    try {
      console.log('üìã Getting public coupons...');
      const coupons = await Coupon.getPublicCoupons();
      console.log(`‚úÖ Found ${coupons.length} public coupons`);
      res.json(coupons);
    } catch (error) {
      console.error('‚ùå Error getting public coupons:', error);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch khuy·∫øn m√£i' });
    }
  }

  // L·∫•y t·∫•t c·∫£ coupons (admin only)
  static async getAllCoupons(req, res) {
    try {
      const coupons = await Coupon.getAllCoupons();
      res.json(coupons);
    } catch (error) {
      console.error('Error getting all coupons:', error);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch coupon' });
    }
  }

  // L·∫•y coupon theo ID
  static async getCouponById(req, res) {
    try {
      const { id } = req.params;
      const coupon = await Coupon.findById(id);
      
      if (!coupon) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y coupon' });
      }

      res.json(coupon);
    } catch (error) {
      console.error('Error getting coupon by ID:', error);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y th√¥ng tin coupon' });
    }
  }

  // T·∫°o coupon m·ªõi (admin only)
  static async createCoupon(req, res) {
    try {
      const couponData = req.body;
      
      // Ki·ªÉm tra xem code ƒë√£ t·ªìn t·∫°i ch∆∞a
      const existingCoupon = await Coupon.findByCode(couponData.code);
      if (existingCoupon) {
        return res.status(400).json({ message: 'M√£ coupon ƒë√£ t·ªìn t·∫°i' });
      }

      const couponId = await Coupon.create(couponData);
      const newCoupon = await Coupon.findById(couponId);
      
      res.status(201).json({
        message: 'T·∫°o coupon th√†nh c√¥ng',
        coupon: newCoupon
      });
    } catch (error) {
      console.error('Error creating coupon:', error);
      res.status(500).json({ message: 'L·ªói server khi t·∫°o coupon' });
    }
  }

  // C·∫≠p nh·∫≠t coupon (admin only)
  static async updateCoupon(req, res) {
    try {
      const { id } = req.params;
      const couponData = req.body;

      const existingCoupon = await Coupon.findById(id);
      if (!existingCoupon) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y coupon' });
      }

      await Coupon.update(id, couponData);
      const updatedCoupon = await Coupon.findById(id);

      res.json({
        message: 'C·∫≠p nh·∫≠t coupon th√†nh c√¥ng',
        coupon: updatedCoupon
      });
    } catch (error) {
      console.error('Error updating coupon:', error);
      res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t coupon' });
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i coupon (admin only)
  static async updateCouponStatus(req, res) {
    try {
      const { id } = req.params;
      const { is_active } = req.body;

      const existingCoupon = await Coupon.findById(id);
      if (!existingCoupon) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y coupon' });
      }

      await Coupon.updateStatus(id, is_active);
      
      res.json({
        message: `${is_active ? 'K√≠ch ho·∫°t' : 'T·∫°m d·ª´ng'} coupon th√†nh c√¥ng`
      });
    } catch (error) {
      console.error('Error updating coupon status:', error);
      res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t tr·∫°ng th√°i coupon' });
    }
  }

  // X√≥a coupon (admin only)
  static async deleteCoupon(req, res) {
    try {
      const { id } = req.params;

      const existingCoupon = await Coupon.findById(id);
      if (!existingCoupon) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y coupon' });
      }

      await Coupon.delete(id);
      res.json({ message: 'X√≥a coupon th√†nh c√¥ng' });
    } catch (error) {
      console.error('Error deleting coupon:', error);
      res.status(500).json({ message: 'L·ªói server khi x√≥a coupon' });
    }
  }

  // Validate coupon
  static async validateCoupon(req, res) {
    try {
      const { code, order_amount } = req.body;
      const userId = req.user?.userId;

      if (!code || !order_amount) {
        return res.status(400).json({ 
          valid: false, 
          error: 'Thi·∫øu th√¥ng tin m√£ coupon ho·∫∑c s·ªë ti·ªÅn ƒë∆°n h√†ng' 
        });
      }

      const result = await Coupon.validateCoupon(code, order_amount, userId);
      res.json(result);
    } catch (error) {
      console.error('Error validating coupon:', error);
      res.status(500).json({ 
        valid: false, 
        error: 'L·ªói server khi ki·ªÉm tra m√£ coupon' 
      });
    }
  }

  // L·∫•y danh s√°ch coupons kh·∫£ d·ª•ng cho user
  static async getAvailableCoupons(req, res) {
    try {
      const coupons = await Coupon.getPublicCoupons();
      res.json(coupons);
    } catch (error) {
      console.error('Error getting available coupons:', error);
      res.status(500).json({ message: 'L·ªói server khi l·∫•y danh s√°ch coupon kh·∫£ d·ª•ng' });
    }
  }
}

module.exports = CouponController;
